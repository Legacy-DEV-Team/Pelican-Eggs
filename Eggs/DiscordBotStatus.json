{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "version": "PLCN_v1",
        "update_url": "https://raw.githubusercontent.com/Legacy-DEV-Team/Pelican-Eggs/refs/heads/main/Eggs/DiscordBotStatus.json"
    },
    "exported_at": "2025-03-03T22:00:28+00:00",
    "name": "Discord Bot Status",
    "author": "ldt@legacyh.dev",
    "uuid": "fe73af9d-0d33-42f4-9572-fad52eb802f0",
    "description": "A Discord Bot that provides real-time status updates for a Discord server.",
    "features": [],
    "docker_images": {
        "Nodejs 23": "ghcr.io/parkervcp/yolks:nodejs_23"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
    "config": {
        "files": "{}",
        "startup": "{\n    \"done\": [\n        \"Logged in as\",\n        \"Initializing category update\"\n    ]\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\n# NodeJS App Installation Script\n#\n# Server Files: /mnt/server\napt update\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\n\necho -e \"updating npm. please wait...\"\nnpm install npm@latest -g\nnpm update -g npm\nnpm update -g\n\nmkdir -p /mnt/server\ncd /mnt/server\n\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\n    echo -e \"assuming user knows what they are doing have a good day.\"\n    exit 0\nfi\n\n## add git ending if it's not on the address\nif [[ ${GIT_ADDRESS} != *.git ]]; then\n    GIT_ADDRESS=${GIT_ADDRESS}.git\nfi\n\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\n    echo -e \"using anon api call\"\nelse\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\nfi\n\n## pull git js repo\nif [ \"$(ls -A /mnt/server)\" ]; then\n    echo -e \"/mnt/server directory is not empty.\"\n    if [ -d .git ]; then\n        echo -e \".git directory exists\"\n        if [ -f .git/config ]; then\n            echo -e \"loading info from git config\"\n            ORIGIN=$(git config --get remote.origin.url)\n        else\n            echo -e \"files found with no git config\"\n            echo -e \"closing out without touching things to not break anything\"\n            exit 10\n        fi\n    fi\n\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\n        echo \"pulling latest from github\"\n        git pull\n    fi\nelse\n    echo -e \"/mnt/server is empty.\ncloning files into repo\"\n    if [ -z ${BRANCH} ]; then\n        echo -e \"cloning default branch\"\n        git clone ${GIT_ADDRESS} .\n    else\n        echo -e \"cloning ${BRANCH}'\"\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\n    fi\nfi\n\necho \"Installing nodejs packages\"\nif [[ ! -z ${NODE_PACKAGES} ]]; then\n    /usr/local/bin/npm install ${NODE_PACKAGES}\nfi\n\nif [ -f /mnt/server/package.json ]; then\n    /usr/local/bin/npm install --production\nfi\n\necho -e \"install complete\"\nexit 0",
            "container": "node:18-bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "sort": 1,
            "name": "Git Repo Address",
            "description": "GitHub Repo to clone\n\nI.E. https://github.com/Legacy-DEV-Team/DiscordBotStatus.git",
            "env_variable": "GIT_ADDRESS",
            "default_value": "https://github.com/Legacy-DEV-Team/DiscordBotStatus.git",
            "user_viewable": false,
            "user_editable": false,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 2,
            "name": "Install Branch",
            "description": "The branch to install.",
            "env_variable": "BRANCH",
            "default_value": "main",
            "user_viewable": false,
            "user_editable": false,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 3,
            "name": "User Uploaded Files",
            "description": "Skip all the install stuff if you are letting a user upload files.\n\n0 = false (default)\n1 = true",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "in:0,1"
            ]
        },
        {
            "sort": 4,
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a GitHub repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "in:0,1"
            ]
        },
        {
            "sort": 5,
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "LegacyAngel2K9",
            "user_viewable": false,
            "user_editable": false,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 6,
            "name": "Git Access Token",
            "description": "Password to use with git.\n\nIt's best practice to use a Personal Access Token.\nhttps://github.com/settings/tokens\nhttps://gitlab.com/-/profile/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 7,
            "name": "Main file",
            "description": "The file that starts the app.\nCan be .js and .ts",
            "env_variable": "MAIN_FILE",
            "default_value": "index.js",
            "user_viewable": true,
            "user_editable": false,
            "rules": [
                "required",
                "string",
                "max:16"
            ]
        }
    ]
}
